noisy <- read.csv('iris_noisy.csv')
noisy <- read.csv('iris_noisy.csv')
noisy <- read.csv('iris_noisy.csv', header = T, fill = T)
readLines('iris_noisy.csv', n = 10)
noisy <- read.csv('iris_noisy.csv', sep = ';', dec = ',', header = T)
head(noisy)
install.packages('e1071')
library(e1071)
library(e1071)
fit.noisy <- naiveBayes(as.factor(Species) ~ ., data = noisy)
pred.noisy <- predict(fit.noisy, noisy)
table(pred.noisy, noisy$Species)
complete <- read.csv('iris_complete.csv', sep = ';', dec = ',', header = T)
fit.complete <- naiveBayes(as.factor(Species) ~ ., data = complete)
pred.complete <- predict(fit.complete, complete)
table(pred.complete, complete$Species)
summary(noisy)
summary(complete)
# Erota meluinen data lajeittain
setosa_noisy <- subset(noisy, Species == "setosa")
versicolor_noisy <- subset(noisy, Species == "versicolor")
virginica_noisy <- subset(noisy, Species == "virginica")
# Yhteenveto lajeittain
summary(setosa_noisy)
summary(versicolor_noisy)
summary(virginica_noisy)
# Vertaile yhteenvetoa täydelliseen dataan
setosa_complete <- subset(complete, Species == "setosa")
versicolor_complete <- subset(complete, Species == "versicolor")
virginica_complete <- subset(complete, Species == "virginica")
summary(setosa_complete)
summary(versicolor_complete)
summary(virginica_complete)
setosa_noisy <- subset(noisy, Species == "setosa")
library(mclust)
mclust_result <- densityMclust(setosa_noisy[, c("Petal.Length", "Petal.Width")])
plot(mclust_result, what = "classification")
plot(mclust_result, what = "density")
normal_samples <- mclust_result$data[which(mclust_result$classification == 1), ]
cluster_center <- mclust_result$parameters$mean
euc_normal <- sqrt(sum((normal_samples[1, ] - cluster_center)^2))  # esimerkki ensimmäisestä normaalista näytteestä
plot(mclust_result, what = "BIC")
# Laske euklidinen etäisyys jokaisen normaalin näytteen (setosa) ja klusterin keskuksen välillä
cluster_center <- mclust_result$parameters$mean
euclidean_distances <- sqrt(rowSums((setosa_noisy[, 1:2] - cluster_center)^2))
# Laske keskimääräinen etäisyys
mean_distance <- mean(euclidean_distances)
mean_distance
# Poista poikkeava näyte ja laske sen etäisyys
outlier <- setosa_noisy[which.max(euclidean_distances), ]
outlier_distance <- sqrt(sum((outlier[1:2] - cluster_center)^2))
outlier_distance
saturated <- read.csv('saturated.csv', sep = ';', dec = ',', header = T)
head(saturated)
summary(saturated)
library(caret)
install.packages('caret')
library(caret)
train_control <- trainControl(method = 'cv', number = 10)
model_cv <- train(Species ~ ., data = saturated, method = 'nb', trControl = train_control)
colnames(saturated)
head(saturated)
min_acc <- min(saturated$Acc)
max_acc <- max(saturated$Acc)
min_acc
max_acc
# Lasketaan kuinka monta kertaa maksimiarvo esiintyy
max_count <- sum(saturated$Acc == max_acc)
# Lasketaan kokonaismäärä
total_count <- nrow(saturated)
# Lasketaan prosenttiosuus
percent_max <- (max_count / total_count) * 100
# Tulostetaan prosenttiosuus
percent_max
# Suoritetaan rle komento
rle_result <- rle(saturated$Acc)
# Pisimmän juoksun pituus
longest_run <- max(rle_result$lengths)
# Pisimmän juoksun arvo
longest_value <- rle_result$values[which.max(rle_result$lengths)]
longest_run
longest_value
# Poistetaan kyllästyspisteen arvo (52) ja lasketaan pisin juoksu
rle_result_no_max <- rle(saturated$Acc[saturated$Acc != max_acc])
# Pisin juoksu
longest_run_non_max <- max(rle_result_no_max$lengths)
# Pisin arvo, joka ei ole kyllästyspiste
longest_non_max_value <- rle_result_no_max$values[which.max(rle_result_no_max$lengths)]
longest_run_non_max
longest_non_max_value
# Laske juoksut, joissa on vähintään 4 peräkkäistä arvoa
runs_with_four_or_more <- sum(rle_result$lengths >= 4)
runs_with_four_or_more
